% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/macro-drat.R
\name{do_drat}
\alias{do_drat}
\title{Build and deploy drat repository}
\usage{
do_drat(
  repo_slug = NULL,
  orphan = FALSE,
  checkout = TRUE,
  path = "~/git/drat",
  branch = "master",
  remote_url = NULL,
  commit_message = NULL,
  commit_paths = ".",
  ssh_key_name = "id_rsa",
  deploy_dev = FALSE
)
}
\arguments{
\item{repo_slug}{\verb{[string]}\cr
The name of the drat repository to deploy to in the form \verb{:owner/:repo}.}

\item{orphan}{\verb{[flag]}\cr
Create and force-push an orphan branch consisting of only one commit?
This can be useful e.g. for \verb{path = "docs", branch = "gh-pages"},
but cannot be applied for pushing to the current branch.}

\item{checkout}{\verb{[flag]}\cr
Check out the current contents of the repository? Defaults to \code{TRUE},
set to \code{FALSE} if the build process relies on existing contents or
if you deploy to a different branch.}

\item{path, branch}{By default, this macro deploys the \code{"master"} branch
of the drat repository. An alternative option is \code{"gh-pages"}.}

\item{remote_url}{\verb{[string]}\cr
The URL of the remote Git repository to push to, defaults to the
current GitHub repository.}

\item{commit_message}{\verb{[string]}\cr
Commit message to use, defaults to a useful message linking to the CI build
and avoiding recursive CI runs.}

\item{commit_paths}{\verb{[character]}\cr
Restrict the set of directories and/or files added to Git before deploying.
Default: deploy all files.}

\item{ssh_key_name}{\code{string}\cr
The name of the private SSH key which should be used for deployment to the
drat repo.}

\item{deploy_dev}{\verb{[logical]}\cr
Should development versions of packages also be deployed to the drat repo?
By default only "major", "minor" and "patch" releases are build and
deployed.}
}
\description{
\code{do_drat()} builds and deploys R packages to a drat repository and adds
default steps to the \code{"install"}, \code{"before_deploy"} and \code{"deploy"} stages:

\enumerate{
\item \code{\link[=step_setup_ssh]{step_setup_ssh()}} in the \code{"before_deploy"} to setup
the upcoming deployment
\item \code{\link[=step_setup_push_deploy]{step_setup_push_deploy()}} in the \code{"before_deploy"} stage
(if \code{deploy} is set),
\item \code{\link[=step_add_to_drat]{step_add_to_drat()}} in the \code{"deploy"}
\item \code{\link[=step_do_push_deploy]{step_do_push_deploy()}} in the \code{"deploy"} stage.
}
}
\section{Deployment}{
 Deployment can only happen to the \code{master} or
\code{gh-pages} branch because the Github Pages functionality from Github is
used to access the drat repository later on. You need to enable this
functionality when creating the drat repository on Github via \verb{Settings -> Github pages} and set it to the chosen setting here.

To build and deploy Windows binaries, builds on Travis CI with deployment
permissions need to be triggered. To build and deploy macOS binaries,
builds on Travis CI with deployment permissions need to be triggered. Have
a look at \url{https://docs.ropensci.org/tic/articles/deployment.html} for
more information and instructions.
}

\examples{
dsl_init()

do_drat()

dsl_get()
}
\seealso{
Other macros: 
\code{\link{do_bookdown}()},
\code{\link{do_package_checks}()},
\code{\link{do_pkgdown}()}
}
\concept{macros}
