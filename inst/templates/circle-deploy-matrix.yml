# tic documentation: https://docs.ropensci.org/tic/dev/

version: 2.1
jobs:
  r-release:
    docker:
      - image: rocker/verse
    steps:
      - checkout
      # create a unique env var for the cache. Unfortunately normal env vars
      # are not picked up by the cache, therefore this workaround is needed.
      # See https://discuss.circleci.com/t/cannot-use-circle-yml-environment-variables-in-cache-keys/10994/7
      - run: echo "$(date -d "$D" '+%d')r-release" > /tmp/_tmp_file
      - restore_cache:
          key: R-package-library-{{ checksum "/tmp/_tmp_file" }}

      # install deps and check pkg ---------------------------------------------
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt install -y libglu1-mesa-dev libgmp-dev libgs-dev libgdal-dev libproj-dev libgeos-dev libudunits2-dev jags
            echo -e 'options(Ncpus = 6, repos = structure(c(CRAN = "https://cloud.r-project.org/")))' > $HOME/.Rprofile
            R -q -e 'install.packages("remotes")'
            R -q -e 'if (getRversion() < "3.2" && !requireNamespace("curl")) install.packages("curl")'
            R -q -e 'remotes::install_github("ropenscilabs/tic", upgrade = "always"); print(tic::dsl_load()); tic::prepare_all_stages()'
            R -q -e 'tic::before_install()'
            R -q -e 'tic::install()'
      - run:
          name: R CMD Check
          no_output_timeout: 60m
          command: |
            R -q -e 'tic::before_script()'
            R -q -e 'tic::script()'

      # save R pkg cache -------------------------------------------------------
      - save_cache:
          key: R-package-library-{{ checksum "/tmp/_tmp_file" }}
          paths:
            - /usr/local/lib/R/site-library
  deploy:
    environment:
      id_rsa: true
    docker:
      - image: rocker/verse
    steps:
      - checkout
      - run: echo "$(date -d "$D" '+%d')" > /tmp/_tmp_file
      - restore_cache:
          key: R-package-library-{{ checksum "/tmp/_tmp_file" }}
      # Add your own SSH key fingerprint here, see https://circleci.com/docs/2.0/gh-bb-integration/#creating-a-github-deploy-key
      # and https://discuss.circleci.com/t/adding-ssh-keys-fails/7747/24 on how to create a valid key
      #- add_ssh_keys:
      #    fingerprints:
      #      - "15:9c:45:50:dc:94:87:6f:a9:ca:e1:fc:6a:b9:7e:62"
      - run:
          name: Deploy
          command: |
            R -q -e 'install.packages("remotes")'
            R -q -e 'if (getRversion() < "3.2" && !requireNamespace("curl")) install.packages("curl")'
            R -q -e 'remotes::install_github("ropenscilabs/tic", upgrade = "always"); print(tic::dsl_load()); tic::prepare_all_stages()'
            R -q -e 'tic::before_deploy()'
            R -q -e 'tic::deploy()'
            R -q -e 'tic::after_deploy()'

  r-oldrelease:
    docker:
      - image: rocker/verse:3.5.3
    steps:
      - checkout
      # create a unique env var for the cache. Unfortunately normal env vars
      # are not picked up by the cache, therefore this workaround is needed.
      # See https://discuss.circleci.com/t/cannot-use-circle-yml-environment-variables-in-cache-keys/10994/7
      - run: echo "$(date -d "$D" '+%d')3.5.3" > /tmp/_tmp_file
      - restore_cache:
          key: R-package-library-{{ checksum "/tmp/_tmp_file" }}

      # install deps and check pkg ---------------------------------------------
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt install -y libglu1-mesa-dev libgmp-dev libgs-dev libgdal-dev libproj-dev libgeos-dev libudunits2-dev jags
            echo -e 'options(Ncpus = 6, repos = structure(c(CRAN = "https://cloud.r-project.org/")))' > $HOME/.Rprofile
            R -q -e 'install.packages("remotes")'
            R -q -e 'if (getRversion() < "3.2" && !requireNamespace("curl")) install.packages("curl")'
            R -q -e 'remotes::install_github("ropenscilabs/tic", upgrade = "always"); print(tic::dsl_load()); tic::prepare_all_stages()'
            R -q -e 'tic::before_install()'
            R -q -e 'tic::install()'
      - run:
          name: R CMD Check
          no_output_timeout: 60m
          command: |
            R -q -e 'tic::before_script()'
            R -q -e 'tic::script()'

      # save R pkg cache -------------------------------------------------------
      - save_cache:
          key: R-package-library-{{ checksum "/tmp/_tmp_file" }}
          paths:
            - /usr/local/lib/R/site-library

workflows:
  build-and-deploy:
    jobs:
      - r-release
      - r-oldrelease
      - deploy:
          requires:
            - r-release

# CRON job daily at 3 am in the morning
# - runs the "build" job on the master branch and builds package cache
  nightly:
    triggers:
      - schedule:
          cron: "0 3 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - r-release
      - r-oldrelease
